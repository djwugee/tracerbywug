import React from 'react';
import { LoaderCircle } from 'lucide-react';

const ImagePanel = ({ isProcessing, processingProgress, processedOutline, outlineContainerRef, outlineCanvasRef, outlineCanvasWidth, outlineCanvasHeight, uploadedImage, processImage, cancelProcessing, downloadButtonRef, showDownloadOptions, setShowDownloadOptions, downloadOutline, svgGenerationStatus }) => {
    const handleDownload = (format) => {
        downloadOutline(format);
        setShowDownloadOptions(false);
    };

    const showSVGGeneStatus = true;

    return (
        React.createElement("div", { className: "mb-4" },
            React.createElement("h4", { className: "font-medium mb-2 text-base text-gray-800" }, "Traced Outline"),
            React.createElement("div", {
                ref: outlineContainerRef,
                className: "border border-gray-200 rounded-md h-64 flex items-center justify-center bg-white overflow-hidden shadow-sm"
            },
                isProcessing ?
                    React.createElement("div", { className: "text-center p-4 w-full" },
                        React.createElement(LoaderCircle, { className: "w-10 h-10 mx-auto text-primary animate-spin mb-3" }),
                        React.createElement("p", { className: "text-gray-600 text-base" }, "Processing image..."),
                        processingProgress > 0 && React.createElement("div", { className: "w-full mt-3 max-w-xs mx-auto" },
                            React.createElement("div", { className: "progress-bar" },
                                React.createElement("div", {
                                    className: "progress-bar-fill",
                                    style: { width: `${processingProgress}%` }
                                })
                            ),
                            React.createElement("p", { className: "text-xs text-gray-500 mt-1" }, `${processingProgress}%`)
                        ),
                        React.createElement("button", {
                            onClick: cancelProcessing,
                            className: "mt-3 inline-flex items-center text-xs text-red-600 hover:text-red-800 bg-red-50 px-2 py-1 rounded-md"
                        },
                            React.createElement("svg", { className: "w-3.5 h-3.5 mr-1" }, React.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z" })),
                            "Cancel"
                        )
                    ) :
                    processedOutline ?
                        React.createElement("canvas", {
                            ref: outlineCanvasRef,
                            width: outlineCanvasWidth,
                            height: outlineCanvasHeight,
                            className: "w-full h-full object-contain"
                        }) :
                        React.createElement("div", { className: "text-center p-4" },
                            React.createElement("p", { className: "text-gray-600 text-base" }, "Traced outline will appear here"),
                            React.createElement("p", { className: "text-gray-400 text-sm mt-1" }, "Aspect ratio will match original image")
                        )
            ),
            React.createElement("div", { className: "flex gap-2" },
                React.createElement("button", {
                    onClick: processImage,
                    disabled: !uploadedImage || isProcessing,
                    className: "flex-1 flex items-center justify-center gap-1.5 px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed text-sm"
                },
                    isProcessing ?
                        React.createElement("div", { className: "flex items-center" },
                            React.createElement(LoaderCircle, { className: "w-4 h-4 animate-spin" }),
                            "Processing..."
                        ) :
                        React.createElement("div", { className: "flex items-center" },
                            "Re-Generate Outline"
                        )
                ),
                processedOutline && React.createElement("div", { className: "relative" },
                    React.createElement("button", {
                        ref: downloadButtonRef,
                        onClick: (e) => {
                            e.stopPropagation();
                            setShowDownloadOptions(!showDownloadOptions)
                        },
                        className: "flex items-center gap-1.5 px-4 py-2 bg-success text-white rounded-md hover:bg-green-700 transition-colors text-sm"
                    },
                        React.createElement("svg", { className: "w-4 h-4" }, React.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z" })),
                        "Download",
                        React.createElement("svg", { className: "w-4 h-4 ml-0.5" }, React.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z" }))
                    ),
                    showDownloadOptions && React.createElement("div", { className: "absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg z-10 border border-gray-200 animate-fadeIn" },
                        React.createElement("ul", { className: "py-1" },
                            React.createElement("li", null,
                                React.createElement("button", {
                                    onClick: (e) => {
                                        e.stopPropagation();
                                        handleDownload("png");
                                    },
                                    className: "flex w-full text-left px-4 py-2.5 text-sm text-gray-700 hover:bg-gray-50 transition-colors items-center"
                                },
                                    React.createElement("span", { className: "flex-1" }, "PNG Format"),
                                    React.createElement("span", { className: "text-xs text-gray-500" }, "Best quality")
                                )
                            ),
                            React.createElement("li", null,
                                React.createElement("button", {
                                    onClick: (e) => {
                                        e.stopPropagation();
                                        handleDownload("jpeg");
                                    },
                                    className: "flex w-full text-left px-4 py-2.5 text-sm text-gray-700 hover:bg-gray-50 transition-colors items-center"
                                },
                                    React.createElement("span", { className: "flex-1" }, "JPEG Format"),
                                    React.createElement("span", { className: "text-xs text-gray-500" }, "Smaller file")
                                )
                            ),
                            React.createElement("li", null,
                                React.createElement("button", {
                                    onClick: (e) => {
                                        e.stopPropagation();
                                        handleDownload("svg");
                                    },
                                    className: `flex w-full text-left px-4 py-2.5 text-sm ${svgGenerationStatus === "success" ? "text-gray-700 hover:bg-gray-50" : "text-gray-400 cursor-not-allowed"} items-center justify-between transition-colors`,
                                    disabled: svgGenerationStatus !== "success"
                                },
                                    React.createElement("span", { className: "flex-1" }, "SVG Format"),
                                    svgGenerationStatus === "generating" ?
                                        React.createElement(LoaderCircle, { className: "w-3.5 h-3.5 animate-spin text-gray-400" }) :
                                        svgGenerationStatus === "success" ?
                                            React.createElement("span", { className: "text-xs text-gray-500" }, "Vector graphics") :
                                            React.createElement("span", { className: "text-red-500 text-xs" }, "Failed")
                                )
                            )
                        )
                    )
                )
            ),
            showSVGGeneStatus && React.createElement("div", { className: "mt-2 text-xs text-gray-500" },
                svgGenerationStatus === "generating" ?
                    React.createElement("div", { className: "flex items-center" },
                        React.createElement(LoaderCircle, { className: "w-3.5 h-3.5 animate-spin mr-1" }),
                        "Generating SVG..."
                    ) :
                    svgGenerationStatus === "success" ?
                        React.createElement("div", { className: "text-green-500" }, "SVG generated successfully") :
                        React.createElement("div", { className: "text-red-500" }, "SVG generation failed")
            )
        )
    );
};

export default ImagePanel;